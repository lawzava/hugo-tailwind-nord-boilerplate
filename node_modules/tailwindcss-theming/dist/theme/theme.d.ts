import { ColorInput } from '@ctrl/tinycolor';
import { ColorObject, ColorScheme, VariableColor, VariantsObject, ColorVariant, VariantTransformer, CustomVariant, Variant } from './color';
import { VariableInput, Variable } from './variable';
import { Strategy } from './strategy';
/**
 * The plugin's theme builder. It is an object that contains the
 * configured themes for the application, as well as other settings needed
 * to generate anything the user wants to be customized.
 */
export declare class ThemeManager {
    private _themes;
    private _strategy?;
    private _prefix?;
    /**
     * Creates a theme manager.
     */
    constructor();
    /**
     * Defines the default theme for every color scheme.
     */
    setDefaultTheme(theme: Theme): this;
    setDefaultLightTheme(theme: Theme): this;
    setDefaultDarkTheme(theme: Theme): this;
    /**
     * Add a theme.
     */
    addTheme(theme: Theme): this;
    /**
     * Add a light theme.
     */
    addLightTheme(theme: Theme): this;
    /**
     * Add a dark theme.
     */
    addDarkTheme(theme: Theme): this;
    /**
     * Gets every themes.
     */
    getAllThemes(): Theme[];
    /**
     * Get every theme, except the default one.
     */
    getThemes(): Theme[];
    /**
     * Get light-schemed themes, except the default one.
     */
    getLightThemes(): Theme[];
    /**
     * Get dark-schemed themes, except the default one.
     */
    getDarkThemes(): Theme[];
    /**
     * Gets the default theme.
     */
    getDefaultTheme(): Theme | undefined;
    /**
     * Gets the default light theme.
     */
    getDefaultLightTheme(): Theme | undefined;
    /**
     * Gets the default dark theme.
     */
    getDefaultDarkTheme(): Theme | undefined;
    /**
     * Gets the default theme for the given scheme.
     */
    private getDefaultThemeFor;
    /**
     * Gets all themes for the given scheme, except the default one.
     */
    private getThemesFor;
    /**
     * Defines the prefix used for the strategy.
     */
    setPrefix(prefix: string): this;
    /**
     * Gets the prefix used for the strategy.
     */
    getPrefix(): string | undefined;
    /**
     * Defines the strategy used for theme selection.
     */
    setStrategy(strategy: Strategy): this;
    /**
     * Gets the strategy used for theme selection.
     */
    getStrategy(): Strategy | undefined;
    /**
     * Each theme will be exported as a `data-theme` attribute.
     * You will be able to use a theme by setting the attribute `data-theme` with the value `<themeName>` on a node.
     * The CSS rule will be `[data-theme=<themeName>]`.
     */
    asDataThemeAttributes(): this;
    /**
     * Each theme will be exported as a data attribute.
     * You will be able to use a theme by setting the attribute `data-<themeName>` on a node. The CSS rule will be `[data-<themeName>]`.
     */
    asDataAttributes(): this;
    /**
     * Each theme will be exported in a class.
     * You will be able to use a theme by applying the class `.<themeName>` on a node. The CSS rule will be `.<themeName>`.
     */
    asClasses(): this;
    /**
     * Each theme will be exported as an attribute with a prefix.
     * You will be able to use a theme by setting the attribute `<choosenPrefix>-<themeName>` on a node.
     * The CSS rule will be `[<choosenPrefix>-<themeName>]`.
     */
    asPrefixedAttributes(prefix?: string): this;
    /**
     * Each theme will be exported in a class with a prefix.
     * You will be able to use a theme by applying the class `.<choosenPrefix>-<themeName>` on a node.
     * The CSS rule will be `.<choosenPrefix>-<themeName>`.
     */
    asPrefixedClasses(prefix?: string): this;
    /**
     * Gets the Tailwind configuration for this theme manager.
     */
    getTailwindConfiguration(): any;
    /**
     * Gets an object that generates the themes' CSS inside the addBase helper.
     */
    getCssConfiguration(): any;
}
export declare class Theme {
    private _name?;
    private _default;
    private _colorScheme;
    private _targetable;
    private _colors;
    private _variables;
    /**
     * Creates a new theme.
     */
    constructor();
    /**
     * Defines this theme's name.
     */
    setName(name: string): this;
    /**
     * Gets this theme's name.
     */
    getName(): string;
    /**
     * Defines this theme as targetable, which means it can be selected
     * with a CSS selector.
     */
    targetable(): this;
    /**
     * Defines this theme as untargetable, which means it can not be selected
     * with a CSS selector.
     */
    untargetable(): this;
    /**
     * Determines if this theme is targetable.
     */
    isTargetable(): boolean;
    /**
     * Defines whether or not this theme is the default for
     * its color scheme.
     */
    setDefault(shouldBeDefault?: boolean): this;
    /**
     * Determines if this theme is the default for its color
     * scheme.
     */
    isDefault(): boolean;
    /**
     * Defines the color scheme of this theme.
     */
    setColorScheme(colorScheme: ColorScheme): this;
    /**
     * Gets the color scheme of this theme.
     */
    getColorScheme(): ColorScheme;
    /**
     * Determines if the theme is for a light scheme.
     */
    isLight(): boolean;
    /**
     * Determines if the theme is for a dark scheme.
     */
    isDark(): boolean;
    /**
     * Determines if the theme has no color scheme.
     */
    hasNoScheme(): boolean;
    /**
     * Determines if the theme has a color scheme.
     */
    hasScheme(): boolean;
    /**
     * Sets this theme's color scheme to light.
     */
    light(): this;
    /**
     * Sets this theme's color scheme to dark.
     */
    dark(): this;
    /**
     * Adds the given colors to the theme.
     *
     * @param colorObject An object of colors, the same format as Tailwind's, but any TinyColor value can be used.
     */
    addColors(colorObject: ColorObject): this;
    /**
     * Adds a color to the theme.
     *
     * @param name The name of the color. Will be used for class names.
     * @param color
     */
    color(name: string, color: ColorInput): this;
    /**
     * Gets all colors in the theme.
     *
     * @param colors A string or an array of color names to filter.
     */
    getColors(colors?: string | string[]): VariableColor[];
    /**
     * Adds the given variants.
     *
     * @param variants A variant object.
     */
    addVariants(variants: VariantsObject): this;
    /**
     * Add the given color variant to a color or a list of colors.
     *
     * @param name The variant name.
     * @param value The variant value.
     * @param colorNames The color name, or list of color names.
     */
    addColorVariant(name: string, value: ColorInput, colorNames?: string | string[]): this;
    /**
     * Add the given opacity variant to a color or a list of colors.
     *
     * @param name The variant name.
     * @param opacity The opacity value.
     * @param colorNames The color name, or list of color names.
     */
    addOpacityVariant(name: string, opacity: number, colorNames?: string | string[]): this;
    /**
     * Add the given custom variant to a color or a list of colors.
     *
     * @param name The variant name.
     * @param value The variant value.
     * @param colorNames The color name, or list of color names.
     */
    addCustomVariant(name: string, transformer: VariantTransformer, colorNames?: string | string[]): this;
    /**
     * Add the given variant to a color or a list of colors.
     *
     * @param name The variant name.
     * @param colorNames The color name, or list of color names.
     */
    addVariant(variant: CustomVariant, colorNames?: string | string[]): this;
    /**
     * Get all variants.
     */
    getVariants(): Variant[];
    /**
     * Get all color variants.
     */
    getColorVariants(): ColorVariant[];
    /**
     * Get all opacity variants.
     */
    getOpacityVariants(): ColorVariant[];
    /**
     * Get all custom variants.
     */
    getCustomVariants(): CustomVariant[];
    /**
     * Adds an arbitrary variable to the theme.
     *
     * @param name The name of the variable.
     * @param value The value of the variable.
     * @param path An optional path to a Tailwind configuration key.
     * @param prefix An optional prefix to be appended to the variable name.
     */
    setVariable(name: string, value: VariableInput | VariableInput[], path?: string, prefix?: string): this;
    /**
     * Gets every variable.
     */
    getVariables(): Variable[];
}
