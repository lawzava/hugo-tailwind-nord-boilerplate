"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Strategy = void 0;
/**
 * Strategy used to export the themes.
 */
var Strategy;
(function (Strategy) {
    /**
     * Each theme will be exported in a class with a prefix.
     * You will be able to use a theme by applying the class `.<choosenPrefix>-<themeName>` on a node.
     * The CSS rule will be `.<choosenPrefix>-<themeName>`.
     */
    Strategy["PrefixedClass"] = "prefixed-class";
    /**
     * Each theme will be exported in a class.
     * You will be able to use a theme by applying the class `.<themeName>` on a node.
     * The CSS rule will be `<themeName>`.
     */
    Strategy["Class"] = "class";
    /**
     * Each theme will be exported as a data-attribute.
     * You will be able to use a theme by setting the attribute `data-<themeName>` on a node.
     * The CSS rule will be `[data-<themeName>]`.
     */
    Strategy["DataAttribute"] = "data-attribute";
    /**
     * Each theme will be exported as a data-theme attribute.
     * You will be able to use a theme by setting the attribute `data-theme` with the value `<themeName>` on a node.
     * The CSS rule will be `[data-theme=<themeName>]`.
     */
    Strategy["DataThemeAttribute"] = "data-theme-attribute";
    /**
     * Each theme will be exported as an attribute with a prefix.
     * You will be able to use a theme by setting the attribute `<choosenPrefix>-<themeName>` on a node.
     * The CSS rule will be `[<choosenPrefix>-<themeName>]`.
     */
    Strategy["PrefixedAttribute"] = "prefixed-attribute";
    /**
     * Each theme will be exported as an attribute.
     * You will be able to use a theme by setting the attribute `<themeName>` on a node.
     * The CSS rule will be `[<themeName>]`.
     */
    Strategy["Attribute"] = "attribute";
})(Strategy = exports.Strategy || (exports.Strategy = {}));
