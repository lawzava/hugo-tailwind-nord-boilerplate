"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variable = void 0;
const tinycolor_1 = require("@ctrl/tinycolor");
const isColorInput_1 = require("../util/isColorInput");
const lodash_1 = __importDefault(require("lodash"));
/**
 * Represents an arbitrary CSS variable.
 */
class Variable {
    constructor(name, value, path, prefix) {
        this._name = name;
        this._value = value;
        this._path = path;
        this._prefix = prefix;
    }
    /**
     * Gets this variable's name.
     */
    getName() {
        return this._name;
    }
    /**
     * Gets this variable's value.
     */
    getValue() {
        return this._value;
    }
    /**
     * Gets this variable's prefix.
     */
    getPrefix() {
        return this._prefix;
    }
    /**
     * Gets the path to the configuration key that this variable extends.
     */
    getPath() {
        if (!this._path) {
            return '';
        }
        return `${this._path}.${lodash_1.default.kebabCase(this._name)}`;
    }
    /**
     * Checks if this variable extends Tailwind's configuration.
     */
    extends() {
        return undefined !== this._path;
    }
    /**
     * Gets a CSS variable name for this variable.
     */
    getCssVariableName() {
        const name = lodash_1.default.kebabCase(this._name);
        const prefix = lodash_1.default.kebabCase(this._prefix);
        return `--${this._prefix ? `${prefix}-` : ''}${name}`;
    }
    /**
     * Gets the value for the Tailwind configuration.
     */
    getTailwindConfigurationValue() {
        return `var(${this.getCssVariableName()})`;
    }
    /**
     * Gets a value usable as the value of a CSS variable.
     */
    getCssVariableValue() {
        const scalarify = (value) => {
            if (lodash_1.default.isString(value)) {
                return value.toString();
            }
            if (lodash_1.default.isNumber(value)) {
                return parseFloat(value.toFixed(8)).toString();
            }
            if (isColorInput_1.isColorInput(value)) {
                const { r, g, b, a } = new tinycolor_1.TinyColor(value);
                return `${r},${g},${b},${a}`;
            }
            return value;
        };
        if (lodash_1.default.isArray(this._value)) {
            return this._value
                .map(item => scalarify(item))
                .map(item => (item.includes(' ') ? `"${item}"` : item))
                .join(', ');
        }
        return scalarify(this._value);
    }
}
exports.Variable = Variable;
