import { ColorInput, TinyColor } from '@ctrl/tinycolor';
export declare class Color {
    private _name;
    private _value;
    private _computed;
    /**
     * Creates a color.
     */
    constructor(name: string, value: ColorInput);
    /**
     * Gets the color's name.
     */
    getName(): string;
    /**
     * Sets the color's name.
     */
    setName(name: string): this;
    /**
     * Get the computed color value.
     */
    getValue(): TinyColor;
    /**
     * Set the color.
     */
    setValue(value: ColorInput): this;
    /**
     * Gets the original value.
     */
    getOriginalValue(): ColorInput;
}
/**
 * A color that may be affected by multiple variants.
 */
export declare class VariableColor extends Color {
    private _variants;
    constructor(name: string, value: ColorInput);
    /**
     * Adds a variant to that color.
     */
    setVariant(variant: CustomVariant): this;
    /**
     * Sets a color variant for that color.
     */
    setColorVariant(name: string, value: ColorInput): this;
    /**
     * Sets a color variant for that color.
     */
    setOpacityVariant(name: string, value: number): this;
    /**
     * Sets a custom variant for that color.
     */
    setCustomVariant(name: string, transformer: VariantTransformer): this;
    /**
     * Gets every variants for this color.
     */
    getVariants(): Variant[];
    /**
     * Gets every color variant for this color.
     */
    getColorVariants(): ColorVariant[];
    /**
     * Gets every opacity variant for this color.
     */
    getOpacityVariants(): OpacityVariant[];
    /**
     * Gets every custom variant for this color.
     */
    getCustomVariants(): CustomVariant[];
    /**
     * Gets every variant of the specified type.
     */
    getVariantsByType(type: VariantType): Variant[];
    /**
     * Get the name used for the Tailwind configuration. Kebab-cased.
     */
    getTailwindConfigurationName(): string;
    /**
     * Get the value used for the Tailwind configuration.
     */
    getTailwindConfigurationValue(): string;
    /**
     * Get the CSS color variable name generated in the final CSS.
     */
    getCssVariableName(): string;
    /**
     * Get the CSS variable value used in the final CSS.
     */
    getCssVariableValue(): string;
}
export interface ColorObject {
    [name: string]: ColorInput | ColorObject;
}
export interface SingleLevelColorObject {
    [name: string]: ColorInput;
}
/**
 * Represents the color schemes usable by the themes.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme
 */
export declare enum ColorScheme {
    /**
     * Indicates that the theme has no specified color scheme.
     */
    Undefined = "no-preference",
    /**
     * Indicates that the theme is created for light themes.
     */
    Light = "light",
    /**
     * Indicates that the theme is created for dark themes.
     */
    Dark = "dark"
}
/**
 * Represents the possible types of variants.
 */
export declare enum VariantType {
    /**
     * A normal variant.
     */
    Custom = 0,
    /**
     * A variant that replaces the color by another.
     */
    Color = 1,
    /**
     * A variant that changes the opacity of the color.
     */
    Opacity = 2
}
/**
 * Takes a color and returns a possibly transformed color.
 */
export declare type VariantTransformer = (color: TinyColor) => TinyColor;
/**
 * Represents a variant.
 */
export interface Variant {
    /**
     * The type of the variant.
     */
    getType(): VariantType;
    /**
     * The name of the variant.
     */
    getName(): string;
    /**
     * Gets the variant type name for registering CSS variables.
     */
    getVariantTypeName(): string;
    /**
     * Applies the variant on a color.
     *
     * @param input The color to apply the variant on.
     */
    apply(input: ColorInput): TinyColor;
    /**
     * Gets the name of the variant key for the Tailwind configuration.
     */
    getTailwindConfigurationName(): string;
    /**
     * Gets the value for this variant for the Tailwind configuration.
     */
    getTailwindConfigurationValue(color: VariableColor): string;
    /**
     * Gets the name of the CSS variable for this variant.
     */
    getCssVariableName(color: VariableColor): string;
    /**
     * Gets the value of the CSS variable for this variant.
     */
    getCssVariableValue(color: VariableColor): string;
}
/**
 * A variant that replaces its color thanks to a given logic.
 */
export declare class CustomVariant implements Variant {
    private _name;
    private _transformer;
    /**
     * Creates a variant.
     *
     * @param {string} name The variant's name.
     * @param {VariantTransformer} transformer The method to transform the color.
     */
    constructor(name: string, transformer: VariantTransformer);
    getType(): VariantType;
    getName(): string;
    getVariantTypeName(): string;
    getTailwindConfigurationName(): string;
    getCssVariableName(color: VariableColor): string;
    /**
     * Gets the computed value of the color.
     */
    apply(input: ColorInput): TinyColor;
    /**
     * Gets an RGBA value separated by comas.
     */
    getCssVariableValue(color: VariableColor): string;
    /**
     * Gets an RGBA value with the name of this variant's variable as a parameter.
     */
    getTailwindConfigurationValue(color: VariableColor): string;
}
/**
 * A variant that replaces its color by another color.
 */
export declare class ColorVariant extends CustomVariant {
    private _replacement;
    /**
     * Creates a color variant.
     *
     * @param name This variant's name.
     * @param replacement The replacement color.
     */
    constructor(name: string, replacement: ColorInput);
    getType(): VariantType;
    getVariantTypeName(): string;
    /**
     * Gets the replacement color.
     */
    getReplacement(): ColorInput;
}
/**
 * A variant that changes the opacity of its color.
 */
export declare class OpacityVariant extends CustomVariant {
    private _opacity;
    /**
     * Creates an opacity variant.
     *
     * @param name This variant's name.
     * @param opacity The new opacity.
     */
    constructor(name: string, opacity: number);
    getType(): VariantType;
    getVariantTypeName(): string;
    /**
     * Gets the opacity.
     */
    getOpacity(): number;
    /**
     * Gets an RGB value separated by comas.
     */
    getCssVariableValue(color: VariableColor): string;
    /**
     * Gets an RGBA value with the name of the color variable as
     * the first parameter and this variant's variable as the second
     */
    getTailwindConfigurationValue(color: VariableColor): string;
}
/**
 * Represents all the types accepted for an object-based variant value.
 */
export declare type VariantInput = ColorInput | VariantTransformer | number;
/**
 * An object that contains multiple variants of multiple types.
 */
export interface VariantsObject {
    [variantName: string]: VariantInput | MappedVariant;
}
/**
 * Represents a variant mapped to one or multiple colors.
 */
export interface MappedVariant {
    variant: VariantInput;
    colors: string | string[];
}
