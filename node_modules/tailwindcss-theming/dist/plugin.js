"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = exports.getThemeManager = exports.getThemeManagerFromThemeOption = exports.defaultOptions = void 0;
const getPresetThemeManager_1 = require("./util/getPresetThemeManager");
const theme_1 = require("./theme/theme");
const strategy_1 = require("./theme/strategy");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
/**
 * The default plugin options.
 */
const defaultOptions = {
    themes: 'theme.config.js',
    strategy: strategy_1.Strategy.DataThemeAttribute,
    prefix: 'theme',
    variants: {
        light: false,
        dark: false,
        noPreference: false,
        variantName: scheme => scheme,
        selectorName: scheme => scheme,
    },
};
exports.defaultOptions = defaultOptions;
/**
 * Get the ThemeManager from the user theme file.
 *
 * @export
 * @param {string} themes
 * @returns {ThemeManager}
 */
function getThemeManagerFromThemeOption(themes) {
    if (false === themes) {
        return null;
    }
    if (themes instanceof theme_1.ThemeManager) {
        return themes;
    }
    const resolved = path_1.default.resolve(themes);
    if (!fs_1.default.existsSync(resolved)) {
        throw new Error(`Could not find the theme configuration file. Tried '${resolved}'.`);
    }
    const config = require(resolved);
    if (!(config instanceof theme_1.ThemeManager)) {
        throw new Error(`No theme manager found in the configuration file "${resolved}".`);
    }
    return config;
}
exports.getThemeManagerFromThemeOption = getThemeManagerFromThemeOption;
function getThemeManager(themes, preset) {
    return preset
        ? getPresetThemeManager_1.getPresetThemeManager(preset)
        : themes
            ? getThemeManagerFromThemeOption(themes)
            : null;
}
exports.getThemeManager = getThemeManager;
/**
 * Get a complete object of options, including defaults.
 *
 * @param {Partial<ThemingPluginOptions>} options
 * @returns {ThemingPluginOptions}
 */
function getOptions(options) {
    // Deep cloning is required, because somehow the defaultOptions are
    // merged with options and subsequent calls are merged with them too.
    return lodash_1.default.merge(lodash_1.default.cloneDeep(defaultOptions), lodash_1.default.cloneDeep(options));
}
exports.getOptions = getOptions;
