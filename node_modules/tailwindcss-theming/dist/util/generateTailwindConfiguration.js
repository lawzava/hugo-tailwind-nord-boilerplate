"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTailwindConfiguration = void 0;
const errors_1 = require("../errors");
const lodash_1 = __importDefault(require("lodash"));
/**
 * Generates a Tailwind configuration.
 */
function generateTailwindConfiguration(manager) {
    return {
        theme: {
            colors: getColorConfiguration(manager),
            extend: getExtendedConfiguration(manager),
        },
    };
}
exports.generateTailwindConfiguration = generateTailwindConfiguration;
function getColorConfiguration(manager) {
    const colorConfiguration = {};
    const defaultTheme = manager.getDefaultTheme();
    // A default theme should be defined, because only a default theme's colors
    // will be generated for subsequent themes.
    if (!defaultTheme) {
        console.warn(errors_1.Errors.NO_DEFAULT_THEME);
    }
    // If no default theme can be found, we use the first one in the list.
    const templateTheme = defaultTheme !== null && defaultTheme !== void 0 ? defaultTheme : manager.getThemes().shift();
    // If there is no theme at all, we throw.
    if (!templateTheme) {
        throw new Error(errors_1.Errors.NO_THEME);
    }
    // Add every color to the theme.
    templateTheme.getColors().forEach((color) => {
        const name = color.getTailwindConfigurationName();
        const value = color.getTailwindConfigurationValue();
        // Creates the color under a `DEFAULT` key, a functionality
        // of Tailwind that omits the `DEFAULT` key in a color's name
        colorConfiguration[name] = { DEFAULT: value };
        // For each variant, add a subcolor for this color, with
        // a computed value for the type of variant.
        color.getVariants().forEach((variant) => {
            const subname = variant.getTailwindConfigurationName();
            const value = variant.getTailwindConfigurationValue(color);
            colorConfiguration[name][subname] = value;
        });
    });
    return colorConfiguration;
}
function getExtendedConfiguration(manager) {
    const extendConfiguration = {};
    manager
        .getAllThemes()
        .map((theme) => theme.getVariables())
        .reduce((final, current) => final.concat(current), [])
        .filter((property) => property.extends()) // keeps only the ones that extend tailwind
        .forEach((property) => {
        lodash_1.default.set(extendConfiguration, property.getPath(), property.getTailwindConfigurationValue());
    });
    return extendConfiguration;
}
