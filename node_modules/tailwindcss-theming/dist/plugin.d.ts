import { ThemeManager } from './theme/theme';
import { Strategy } from './theme/strategy';
import { Preset } from './presets';
/**
 * Possible types for the theme option.
 */
declare type ThemeOption = string | ThemeManager | false;
/**
 * The default plugin options.
 */
declare const defaultOptions: ThemingPluginOptions;
/**
 * The options that a user can pass to the plugin.
 */
export interface ThemingPluginOptions {
    /**
     * Either a path to a file that exports a Theme Manager,
     * a Theme Manager,
     * or false to explicitly disable themes.
     */
    themes: ThemeOption;
    /**
     * A given preset.
     */
    preset?: Preset;
    /**
     * Configuration for the variant plugin.
     */
    variants: Partial<VariantPluginOptions>;
    /**
     * A prefix if required by the strategy. This can be overriden by the theme manager.
     * Defaults to "theme".
     */
    prefix: string;
    /**
     * The strategy used for defining theme selectors. This can be overriden by the theme manager.
     * Defaults to "data-theme-attribute".
     */
    strategy: Strategy;
}
export interface VariantPluginOptions {
    /**
     * Enables the `light` variant.
     */
    light: boolean;
    /**
     * Enables the `dark` variant.
     */
    dark: boolean;
    /**
     * Enables the `no-preference` variant.
     */
    noPreference: boolean;
    /**
     * Defines the name of the variant's selector.
     *
     * @param {string} scheme The scheme name.
     */
    selectorName: (scheme: string) => string;
    /**
     * Defines the name of the variant.
     *
     * @param {string} scheme The scheme name.
     */
    variantName: (scheme: string) => string;
}
/**
 * Get the ThemeManager from the user theme file.
 *
 * @export
 * @param {string} themes
 * @returns {ThemeManager}
 */
declare function getThemeManagerFromThemeOption(themes: ThemeOption): ThemeManager | null;
declare function getThemeManager(themes: ThemeOption, preset?: Preset): ThemeManager | null;
/**
 * Get a complete object of options, including defaults.
 *
 * @param {Partial<ThemingPluginOptions>} options
 * @returns {ThemingPluginOptions}
 */
declare function getOptions(options: Partial<ThemingPluginOptions>): ThemingPluginOptions;
export { defaultOptions, getThemeManagerFromThemeOption, getThemeManager, getOptions };
