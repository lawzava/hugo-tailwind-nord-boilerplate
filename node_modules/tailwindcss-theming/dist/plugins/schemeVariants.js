"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemeVariantPlugin = exports.schemeVariant = void 0;
const api_1 = require("../api");
/**
 * Plugin that creates variants depending on the given configuration.
 *
 * @param helpers The tailwind plugin helpers.
 * @param options The variant plugin options.
 */
function schemeVariant(helpers, { light, dark, noPreference, selectorName, variantName }) {
    const variants = [
        ...(light ? [api_1.ColorScheme.Light] : []),
        ...(dark ? [api_1.ColorScheme.Dark] : []),
        ...(noPreference ? [api_1.ColorScheme.Undefined] : []),
    ];
    variants.forEach(scheme => {
        // console.log({
        //   variantName: variantName(scheme),
        //   selectorName: selectorName(scheme),
        //   scheme,
        // });
        schemeVariantPlugin(variantName(scheme), selectorName(scheme), scheme, helpers);
    });
}
exports.schemeVariant = schemeVariant;
/**
 *
 * @param variantName The name of the variant.
 * @param scheme The color scheme for this variant.
 * @param helpers The tailwind plugin helpers.
 */
function schemeVariantPlugin(variantName, selectorName, scheme, { addVariant, e, postcss }) {
    addVariant(variantName, ({ container, separator }) => {
        // Creates the prefers-color-scheme rule
        const prefersColorScheme = postcss.atRule({
            name: 'media',
            params: `(prefers-color-scheme: ${scheme})`,
        });
        // Places the nodes correctly
        prefersColorScheme.append(container.nodes);
        container.append(prefersColorScheme);
        // Updates the selector to add the variant name
        prefersColorScheme.walkRules((rule) => {
            rule.selector = `.${e(`${selectorName}${separator}${rule.selector.slice(1)}`)}`;
        });
    });
}
exports.schemeVariantPlugin = schemeVariantPlugin;
